"" containing ycm,ctags,taglist,airline,ctrlp 
" portable vim config file I use in different servers
"
"=================
"" general setting
""================

set number
set mouse=a
set autoindent
set smartindent
set shiftwidth=4

set tabstop=4
set expandtab
set smarttab

set hlsearch
set incsearch

syntax on

" When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
if has("autocmd")
    autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
endif

"==============================================================================
"keyboard mapping
"==============================================================================
let mapleader = ","
vnoremap  <silent> k gkzz
vnoremap  <silent> j gjzz
nnoremap  <silent> k gkzz
nnoremap  <silent> j gjzz
cmap <c-p> <Up>
cmap <c-n> <Down>


"==============================================================================
"vundle setting"
"==============================================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'taglist.vim'
"Plugin 'SuperTab'
"Plugin 'TagHighlight'
"Plugin 'vimwiki'
"Plugin 'winmanager'"Plugin 'bufexplorer.zip'
Plugin 'The-NERD-tree'
"Plugin 'matrix.vim--Yang'
"Plugin 'FencView.vim'
"Plugin 'bufkill.vim'
"Plugin 'Conque-Shell'
"Plugin 'Vimpress'
"Plugin 'LaTeX-Suite-aka-Vim-LaTeX'
"Plugin 'c.vim'
"Plugin 'Grep.vim'
"Plugin 'a.vim'
"Plugin 'kshenoy/vim-signature'
"Plugin 'autoload_cscope.vim'

Plugin 'kien/ctrlp.vim'
"Plugin 'Lokaltog/vim-powerline'
Plugin 'stephenmckinney/vim-solarized-powerline'
Plugin 'altercation/vim-colors-solarized'
"Plugin 'Lokaltog/vim-easymotion'
"Plugin 'haya14busa/incsearch.vim'
"Plugin 'haya14busa/incsearch-easymotion.vim'
"Plugin 'haya14busa/incsearch-fuzzy.vim'


Plugin 'Valloric/YouCompleteMe'
"Plugin 'javacomplete'
"Plugin 'octol/vim-cpp-enhanced-highlight'
"Plugin 'vim-scripts/TagHighlight'
Plugin 'bling/vim-airline'
"Plugin 'edkolev/promptline.vim'
"Plugin 'edkolev/tmuxline.vim'
Plugin 'paranoida/vim-airlineish'
"Plugin 'itchyny/lightline.vim'

Plugin 'FelikZ/ctrlp-py-matcher'

Plugin 'scrooloose/syntastic'
Plugin 'DoxygenToolkit.vim'
"Plugin 'vim-scripts/YankRing.vim'
"Plugin 'vim-scripts/AutoComplPop'
"Plugin 'vim-scripts/SyntaxComplete'
Plugin 'Yggdroot/indentLine'
Plugin 'Raimondi/delimitMate'
"Plugin 'SirVer/ultisnips'
"Plugin 'airblade/vim-rooter'
"Plugin 'terryma/vim-expand-region'

"Plugin 'lervag/vim-latex'

"Plugin 'tpope/vim-fugitive'
"Plugin 'mhinz/vim-signify'

Plugin 'craigemery/vim-autotag'

"Plugin 'Rip-Rip/clang_complete'
"Plugin 'Shougo/neocomplete.vim'

"Plugin 'terryma/vim-multiple-cursors'
"Plugin 'tomasr/molokai'
"Plugin 'zenorocha/dracula-theme'

"Plugin 'rking/ag.vim'


call vundle#end()
filetype plugin indent on

"==========================================================================
"taglist
"==========================================================================

" 不同时显示多个文件的 tag ，只显示当前文件的
let Tlist_Show_One_File=0

" 如果 taglist 窗口是最后一个窗口，则退出 vim
let Tlist_Exit_OnlyWindow=1

"让当前不被编辑的文件的方法列表自动折叠起来
let Tlist_File_Fold_Auto_Close=1

"把taglist窗口放在屏幕的右侧，缺省在左侧
let Tlist_Use_Right_Window=1

"显示taglist菜单
let Tlist_Show_Menu=1


" winmanager配置  
"let g:winManagerWindowLayout='TagList|FileExplorer'  
"let g:winManagerWindowLayout='NERDTree|TagList'  
let g:winManagerWindowLayout='TagList'  
let g:winManagerWidth = 30  
let g:winManagerAutoOpen=0  

"""""""""""""""solarized powerline and colorscheme """""""""""""""""""""
"let g:Powerline_theme='short'
syntax enable
if has('gui_running')
    set background=light
else
    set background=dark
endif
set t_Co=256
let g:solarized_termcolors=256
colorscheme solarized
"colorscheme dracula
"colorscheme molokai
"let g:molokai_original = 0
"let g:rehash256 = 0
set laststatus=2

"set t_Co=256
"let g:solarized_termcolors=256
"let g:Powerline_colorscheme='solarized256_dark'
"set background=dark
"colorscheme solarized

"let g:airline_theme             = 'base16'
"let g:airline_theme             = 'airlineish'
"let g:airline_theme             = 'powerlineish'
"let g:airline_theme             = 'bubblegum'
"let g:airline_theme             = 'kalisi'
"let g:airline_enable_syntastic  = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline_powerline_fonts=1

" enable tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

"let g:airline#extensions#hunks#enabled =0

let g:Powerline_symbols = 'fancy'

" old vim-powerline symbols
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''


let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#eclim#enabled = 1


nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" enable/disable showing a summary of changed hunks under source control. >
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 1
" enable/disable showing only non-zero hunks. >
let g:airline#extensions#hunks#non_zero_only = 0
" set hunk count symbols. >
let g:airline#extensions#hunks#hunk_symbols = ['+', '~', '-']
" set filename
let g:airline_section_c = '%t'
let g:airline_section_c = airline#section#create(['%t', ' ', 'readonly'])
"let g:airline_section_y = airline#section#create_right([hostname()])

" set default layout
let g:airline#extensions#default#layout = [
            \ [ 'a', 'b', 'c', ],
            \ [ 'x', 'y', 'z' ]
            \ ]

" control the auto-truncation of airline
let g:airline#extensions#default#section_truncate_width = {
            \ 'b': 79,
            \ 'x': 60,
            \ 'y': 88,
            \ 'z': 45,
            \ }
let g:airline#extensions#default#section_truncate_width = {}

""""""""""tmuxline""""""""""""""""""""""
let g:airline#extensions#tmuxline#enabled = 0
"let g:tmuxline_theme = 'airline_virtual'

""""""""""""""ctrlP""""""""""""""""""
let g:ctrlp_extensions=['smarttabs']
"let g:ctrlp_user_command = 'ag %s -i --nogroup --hidden
"            \ --ignore .git
"            \ --ignore .svn
""            \ --ignore .hg
""            \ --ignore .DS_Store
""            \ --ignore "doc/**"
""            \ --ignore "**/*.pyc"
""            \ --ignore "**/*.so"
""            \ --ignore "**/*.swp"
""            \ --ignore "**/*.gz"
""            \ --ignore "**/*.tar"
""            \ --ignore "**/*.a"
""            \ --ignore "**/*.o"
""            \ --ignore "**/*.so"
""            \ --ignore "**/*.zip"
""            \ --ignore "**/*.class"
""            \ --ignore "**/*.html"
""            \ --ignore "**/*.png"
""            \ --ignore "**/*.jpg"
""            \ --ignore "**/.*/**"
""            \ --ignore "**/.*"
""            \ -g ""'

let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' } 
let g:ctrlp_max_height = 20
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.tar,*.gz

"map <leader>p :CtrlP<CR>
"map <leader>b :CtrlPBuffer<CR>
map <leader>m :CtrlPMRUFiles<CR>
map <leader>t :CtrlPTag<CR>

"set viewoptions=folds
"set foldmethod=syntax
"set cursorcolumn

"autocmd BufNewFile,BufRead *.c set formatprg=astyle\ -b

"autocmd Filetype * runtime! autoload/eclim/<amatch>/complete.vim
"    \ | let s:cfunc = 'eclim#'.expand('<amatch>').'#complete#CodeComplete'
"    \ | if exists('*'.s:cfunc) | let &l:omnifunc=s:cfunc | endif

"autocmd Filetype php setlocal omnifunc=eclim#php#complete#CodeComplete
autocmd Filetype java setlocal omnifunc=eclim#java#complete#CodeComplete
"let g:EclimFileTypeValidate = 0
"let g:EclimJavaValidate = 1
autocmd FileType c let g:EclimFileTypeValidate = 0
autocmd FileType cpp let g:EclimFileTypeValidate = 0

filetype detect
if &ft=="java"
    "nnoremap <F5> :exec("SyntasticCheck") <bar> exec("Errors")<CR> <C-W>j <CR>
    "nnoremap <F5> :JavaDocPreview<CR>

    "eclimd settings
    " search the implementaion of the method under cursor
    noremap <F7> :JavaSearch -t all -x implementors -s project -a edit <cr>
    noremap <leader>jsi :JavaSearch -t all -x implementors -s project -a edit <cr>
    noremap <leader>jsiv :JavaSearch -t all -x implementors -s project -a vsplit <cr>
    noremap <leader>jsis :JavaSearch -t all -x implementors -s project -a split <cr>
    noremap <F6> :JavaSearch -t all -x declarations -s project -a edit <cr>
    noremap <leader>jsd :JavaSearch -t all -x declarations -s project -a edit <cr>
    noremap <leader>jsdv :JavaSearch -t all -x declarations -s project -a vsplit <cr>
    noremap <leader>jsds :JavaSearch -t all -x declarations -s project -a split <cr>
    " search the references of the method under cursor
    noremap <F5> :JavaSearch -t all -x references -s project -a edit <cr>
    noremap <leader>jsr :JavaSearch -t all -x references -s project -a edit <cr>
    noremap <leader>jsrv :JavaSearch -t all -x references -s project -a vsplit <cr>
    noremap <leader>jsrs :JavaSearch -t all -x references -s project -a split <cr>
    " serach the implementation for a given pattern
    noremap <F4> :JavaSearch -s workspace -t method -x implementors -i -a edit -p 
    noremap <C-]> :JavaSearchContext -a edit <cr>
    noremap <leader>jsc  :JavaSearchContext -a edit <cr>
    noremap <leader>jscv :JavaSearchContext -a vsplit <cr>
    noremap <leader>jscs :JavaSearchContext -a split <cr>
    "noremap <C-]> :JavaSearch -t all -x declarations -s project -a edit <C-R><C-W> <cr>
    let g:EclimJavaSearchSingleResult = "edit"
else
    nnoremap <F5> :SyntasticCheck<CR>
endif

"delimitMate
let g:delimitMate_expand_cr=1
let g:delimitMate_expand_space=1
let g:indentLine_color_term=239


""""""""""""""""""configuration for YCM"""""""""""""""""""""""""""""

"设置error和warning的提示符，如果没有设置，ycm会以syntastic的
" g:syntastic_warning_symbol 和 g:syntastic_error_symbol 这两个为准
let g:ycm_error_symbol = "✗"
let g:ycm_warning_symbol = '⚠'

"设置跳转的快捷键，可以跳转到definition和declaration
nnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
map <F4> :lcd %:p:h<CR> :make<CR>

"设置全局配置文件的路径
"default
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"开启基于tag的补全，可以在这之后添加需要的标签路径
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
"开启语义补全
let g:ycm_seed_identifiers_with_syntax = 1
"在接受补全后不分裂出一个窗口显示接受的项
"set completeopt-=preview
set completeopt=menu,longest
"set complete=.,b,u,]
"set complete+=k
"不显示开启vim时检查ycm_extra_conf文件的信息
let g:ycm_confirm_extra_conf=0
"每次重新生成匹配项，禁止缓存匹配项
let g:ycm_cache_omnifunc=1
"在注释中也可以补全
let g:ycm_complete_in_comments=1
"输入第一个字符就开始补全
let g:ycm_min_num_of_chars_for_completion=1
"不查询ultisnips提供的代码模板补全，如果需要，设置成1即可
let g:ycm_use_ultisnips_completer=1

"let g:ycm_filetype_whitelist = { '*': 1 }
"let g:ycm_auto_trigger = 0
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'qf' : 1,
            \ 'unite' : 1,
            \ 'vimwiki' : 1,
            \ 'pandoc' : 1,
            \ 'infolog' : 1,
            \ 'mail' : 1
            \}

let g:ycm_register_as_syntastic_checker=0
let g:ycm_show_diagnostics_ui=0

let g:ycm_echo_current_diagnostic = 1
let g:ycm_enable_diagnostic_highlighting = 1

"let g:syntastic_mode_map = { 'passive_filetypes':['tex', 'java'] }
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': ['tex', 'java'] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:ycm_always_populate_loc_list = 1
let g:syntastic_quiet_message={'level':'warnings'}

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<c-n>'
"let g:SuperTabDefaultCompletionType = '<C-X><C-N>'
let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabContextDefaultCompletionType = "<C-X><C-N>"
"let g:SuperTabDefaultCompletionType = "<c-x><c-n>"
"let g:SuperTabDefaultCompletionType = '<c-x> <c-o>'

""""""""""syntastic""""""""""""
"let g:syntastic_debug = 0
"let g:syntastic_check_on_open = 1
"let g:syntastic_enable_signs = 1
"let g:syntastic_c_include_dirs = ['/users/wentian/GlobalMemory/code/include']
"let g:syntastic_c_remove_include_errors = 1
"let g:syntastic_c_check_header = 1
"let g:syntastic_c_compiler = 'gcc'
"let g:syntastic_c_compiler_options = '-O2'
"
"let g:syntastic_c_checkers = ['gcc']
"let g:syntastic_cpp_checkers = ['gcc']
"let g:syntastic_cpp_include_dirs = ['/users/wentian/GlobalMemory/code/include']
"let g:syntastic_cpp_remove_include_errors = 1
"let g:syntastic_cpp_check_header = 1
"let g:syntastic_cpp_compiler = 'gcc'
"let g:syntastic_cpp_compiler_options = '-std=c++11'
""set error or warning signs
"let g:syntastic_error_symbol = "✗"
"let g:syntastic_warning_symbol = '⚠'
""whether to show balloons
"let g:syntastic_enable_balloons = 1
"
"let g:syntastic_mode_map = { 'passive_filetypes':['tex', 'java', 'c', 'cpp'] }
"
"map <F3> :bnext<CR>
"

""""""""""""""""""""NERDTree 配置 """"""""""""""""""""""""""
let NERDTreeIgnore = ['\.pyc$', '\.o$']
let g:NERDTree_title="[NERDTree]"  
function! NERDTree_Start()  
    exec 'NERDTree'  
endfunction  
function! NERDTree_IsValid()  
    return 1  
endfunction   

